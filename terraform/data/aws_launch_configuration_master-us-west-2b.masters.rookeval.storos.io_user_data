#!/bin/bash
# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL=https://kubeupv2.s3.amazonaws.com/kops/1.7.0/linux/amd64/nodeup
NODEUP_HASH=


function ensure-install-dir() {
  INSTALL_DIR="/var/cache/kubernetes-install"
  # On ContainerOS, we install to /var/lib/toolbox install (because of noexec)
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kubernetes-install"
  fi
  mkdir -p ${INSTALL_DIR}
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. Takes a hash and a set of URLs.
#
# $1 is the sha1 of the URL. Can be "" if the sha1 is unknown.
# $2+ are the URLs to download.
download-or-bust() {
  local -r hash="$1"
  shift 1

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      local file="${url##*/}"
      rm -f "${file}"
      if ! curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10 "${url}"; then
        echo "== Failed to download ${url}. Retrying. =="
      elif [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
        echo "== Hash validation of ${url} failed. Retrying. =="
      else
        if [[ -n "${hash}" ]]; then
          echo "== Downloaded ${url} (SHA1 = ${hash}) =="
        else
          echo "== Downloaded ${url} =="
        fi
        return
      fi
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha1sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  # TODO(zmerlynn): Now we REALLY have no excuse not to do the reboot
  # optimization.

  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  local -r nodeup_filename="${nodeup_urls[0]##*/}"
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha1 (not found in env)"
    download-or-bust "" "${nodeup_urls[@]/%/.sha1}"
    local -r nodeup_hash=$(cat "${nodeup_filename}.sha1")
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  # In case of failure checking integrity of release, retry.
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

cat > kube_env.yaml << __EOF_KUBE_ENV
Assets:
- 21c42fe14a9dd2e3f5ee4179993969ecd558dbc9@https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kubelet
- c92ec52c02ec10a1ab54132d3cc99ad6f68c530e@https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kubectl
- 1d9788b0f5420e1a219aad2cb8681823fc515e7c@https://storage.googleapis.com/kubernetes-release/network-plugins/cni-0799f5732f2a11b329d9e3d51b9c8f2e3759f2ff.tar.gz
- 5d95d64d7134f202ba60b1fa14adaff138905d15@https://kubeupv2.s3.amazonaws.com/kops/1.7.0/linux/amd64/utils.tar.gz
ClusterName: rookeval.storos.io
ConfigBase: s3://kubeaws-rook/rookeval.storos.io
InstanceGroupName: master-us-west-2b
Tags:
- _automatic_upgrades
- _aws
- _kubernetes_master
channels:
- s3://kubeaws-rook/rookeval.storos.io/addons/bootstrap-channel.yaml
protokubeImage:
  hash: 5bd97a02f0793d1906e9f446c548ececf1444737
  name: protokube:1.7.0
  source: https://kubeupv2.s3.amazonaws.com/kops/1.7.0/images/protokube.tar.gz

__EOF_KUBE_ENV

download-release
echo "== nodeup node config done =="

#-------------------------------------------------------------------------------
# customizations:
echo "Additional customizations..."

cat > rook-cluster.yaml <<ROOK01
apiVersion: v1
kind: Namespace
metadata:
  name: rook
---
apiVersion: rook.io/v1alpha1
kind: Cluster
metadata:
  name: rook-eval
  namespace: rook
spec:
  versionTag: v0.5.1
  dataDirHostPath: "/var/lib/docker/rook-eval"

  storage:
    useAllNodes: true
    useAllDevices: false
    deviceFilter: nvm
    metadataDevice:
    location:
    storeConfig:
      storeType: bluestore
      databaseSizeMB: 1024
      journalSizeMB: 1024
ROOK01

function wait_for_k8sapi() {
  while true; do
    if curl --silent \
  		--connect-timeout 1 \
  		--show-error \
  		--fail \
  		--output /dev/null \
  		http://localhost:8080/api/ 2>/dev/null
    then
      return
    fi
    echo "Waiting... Kube api isn't up yet, waiting for 20 seconds to retry again."
    sleep 20
  done
}

function install_helm() {
  echo "Installing helm."
  local -r url=https://storage.googleapis.com/kubernetes-helm/helm-v2.6.0-linux-amd64.tar.gz
  local -r artifact=helm.tar.gz

  wget --output-file=$artifact --quiet $url
  tar -zxvf $artifact

  mv linux-amd64/helm /usr/local/bin/ && rm -fr linux-amd64 $artifact
}

function install_rook_helm() {
  helm init
  helm repo add rook-master http://charts.rook.io/master
  kubectl -n kube-system create sa tiller
  kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller
  kubectl -n kube-system patch deploy/tiller-deploy -p '{"spec": {"template": {"spec": {"serviceAccountName": "tiller"}}}}'
}

function install_rook() {
  echo "Installing rook components."
  /usr/local/bin/kubectl create -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/rook-operator.yaml
  echo "Waiting for the Rook operator to finish its tasks." && sleep 60

  /usr/local/bin/kubectl create -f rook-cluster.yaml
  /usr/local/bin/kubectl create -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/rook-storageclass.yaml
  /usr/local/bin/kubectl create -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/rook-tools.yaml
}

function install_prom() {
  echo "Installing Prometheus"
  # Re: https://github.com/coreos/prometheus-operator/blob/master/contrib/kube-prometheus/docs/KOPSonAWS.md#adding-kube-prometheus
  git clone -b master https://github.com/coreos/prometheus-operator.git prometheus-operator-temp;
  cd prometheus-operator-temp/contrib/kube-prometheus
  ./hack/cluster-monitoring/deploy
  kubectl -n kube-system create -f manifests/k8s/self-hosted/
  cd -
  rm -rf prometheus-operator-temp

  /usr/local/bin/kubectl expose --namespace=monitoring service prometheus-operated --type=LoadBalancer --port=8091 --target-port=9090 --name=prom-pub
  /usr/local/bin/kubectl expose --namespace=monitoring service grafana --type=LoadBalancer --port=8092 --target-port=3000 --name=grafana-pub
}

function rook_monitoring() {
  echo "Setting up Rook monitoring."
}

# install_helm

wait_for_k8sapi
sleep 5

echo "Installing Kube Dashboard and heapster."
/usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

# install_prom
# install_rook
